<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:Controls="clr-namespace:System.Windows.Controls">

    <BooleanToVisibilityConverter x:Key="boolToVisiblityConverterCollapsed"/>
    <Controls:BoolToVisibilityConverterHidden x:Key="boolToVisiblityConverterHidden"/>
    <Controls:DoubleToThicknessLeftConverter x:Key="doubleToMarginConverter"/>
    <Style TargetType="{x:Type Controls:TreeViewExItem}" x:Key="TreeViewExBaseStyle">
        <Style.Resources>
            <Controls:TreeViewLastChildConverter x:Key="TreeViewLastChildConverter"/>
            <Controls:RootLinesVisibilityConverter x:Key="RootLinesVisibilityConverter"/>
        </Style.Resources>
        <Setter Property="Background" Value="AliceBlue"/>
        <Setter Property="Control.HorizontalContentAlignment"
                Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Left}" />
        <Setter Property="Control.VerticalContentAlignment"
                Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Center}" />
        <Setter Property="Control.Padding" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style TargetType="{x:Type IFrameworkInputElement}">
                    <Style.Resources>
                        <ResourceDictionary />
                    </Style.Resources>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:TreeViewExItem}">
                    <StackPanel Background="Transparent" x:Name="stacki">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Rectangle x:Name="HorLn" Margin="9,1,0,0" Height="1" Stroke="Gray" SnapsToDevicePixels="True" />
                            <Rectangle x:Name="VerLn" Width="1" Stroke="Gray" Margin="0,0,1,0" Grid.RowSpan="2" SnapsToDevicePixels="true" Fill="White"/>
                            <Border x:Name="border" Grid.Column="1"
						            BorderThickness="1" 
                                    Padding="{TemplateBinding Control.Padding}"
                                    SnapsToDevicePixels="True"
                                    CornerRadius="2" VerticalAlignment="Center" Margin="-10,0,0,0">
                                <DockPanel x:Name="ct">
                                    <ToggleButton DockPanel.Dock="Left" Margin="-10,0,0,0"
                                        IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:TreeViewExItem}},Path=IsExpanded,FallbackValue=False}"
                                        Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:TreeViewExItem}},Path=HasItems, Converter={StaticResource boolToVisiblityConverterHidden},FallbackValue=Collapsed}"
                                        ClickMode="Press" Name="Expander" HorizontalAlignment="Right">
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Style.Resources>
                                                    <ResourceDictionary />
                                                </Style.Resources>
                                                <Setter Property="UIElement.Focusable" Value="False" />
                                                <Setter Property="FrameworkElement.Width" Value="16" />
                                                <Setter Property="FrameworkElement.Height" Value="16" />
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Width="19" Height="13" Background="Transparent">
                                                                <Border Width="9" Height="9" SnapsToDevicePixels="true" BorderBrush="#FF7898B5"
                                                                    BorderThickness="1" CornerRadius="1">
                                                                    <Border.Background>
                                                                        <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                                                            <GradientStop Color="White" Offset=".2" />
                                                                            <GradientStop Color="#FFC0B7A6" Offset="1" />
                                                                        </LinearGradientBrush>
                                                                    </Border.Background>
                                                                    <Path x:Name="ExpandPath" Fill="Black" Margin="1,1,1,1"
                                                                      Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z" />
                                                                </Border>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsChecked" Value="True">
                                                                    <Setter Property="Data" TargetName="ExpandPath" Value="M 0 2 L 0 3 L 5 3 L 5 2 Z" />
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                    <ContentPresenter x:Name="content" Margin="5,0,0,0"
                                    FocusManager.IsFocusScope="True" 
                                    Content="{TemplateBinding HeaderedContentControl.Header}"
                                    ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                    ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                    ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                    ContentSource="Header"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                                </DockPanel>
                            </Border>
                            <ItemsPresenter x:Name="itemsPresenter" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Visibility="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisiblityConverterCollapsed}, FallbackValue=Hidden}"/>
                        </Grid>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="true">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource TreeViewLastChildConverter}">
                                    <Binding RelativeSource="{RelativeSource Self}"/>
                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Controls:TreeViewEx}" Path="RenderDataChanged"/>
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter TargetName="VerLn" Property="Height" Value="10"/>
                            <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top"/>
                        </DataTrigger>
                        <DataTrigger Value="true">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource RootLinesVisibilityConverter}">
                                    <Binding RelativeSource="{RelativeSource Self}"/>
                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Controls:TreeViewEx}" Path="RenderDataChanged"/>
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter TargetName="VerLn" Property="Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="border">
                            <Setter Property="Control.Background" TargetName="border"
                                    Value="{Binding BackgroundHovered, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                            <Setter Property="Border.BorderBrush" TargetName="border"
                                    Value="{Binding BorderBrushHovered, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                        </Trigger>
                        <Trigger Property="Controls:TreeViewExItem.IsSelected" Value="True">
                            <Setter Property="Control.Background" TargetName="border"
                                    Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                            <Setter Property="Border.BorderBrush" TargetName="border"
                                    Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                        </Trigger>
                        <Trigger Property="Controls:TreeViewExItem.IsFocused" Value="True">
                            <Setter Property="Border.BorderBrush" TargetName="border"
                                    Value="{Binding BorderBrushFocused, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                            <Setter Property="Control.Background" TargetName="border"
                                    Value="{Binding BackgroundFocused, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Controls:TreeViewExItem.IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Border.BorderBrush" TargetName="border"
                                    Value="{Binding BorderBrushSelectedHovered, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                            <Setter Property="Control.Background" TargetName="border"
                                    Value="{Binding BackgroundSelectedHovered, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Controls:TreeViewExItem.IsFocused" Value="True" />
                                <Condition Property="Controls:TreeViewExItem.IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Border.BorderBrush" TargetName="border"
                                    Value="{Binding BorderBrushFocusedSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                            <Setter Property="Control.Background" TargetName="border"
                                    Value="{Binding BackgroundFocusedSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition
                                        Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=IsActive, FallbackValue=False}"
                                        Value="False" />
                                <Condition
                                        Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}"
                                        Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Border.BorderBrush" TargetName="border"
                                    Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                            <Setter Property="Control.Background" TargetName="border"
                                    Value="{Binding BackgroundInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                        </MultiDataTrigger>

                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground">
                                <Setter.Value>
                                    <DynamicResource ResourceKey="{x:Static SystemColors.GrayTextBrushKey}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEditable"
                                 Value="False">
                            <Setter Property="TextElement.Foreground"
                                    TargetName="content">
                                <Setter.Value>
                                    <DynamicResource ResourceKey="{x:Static SystemColors.GrayTextBrushKey}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Controls:TreeViewExItem.IsEditing" Value="True">
                            <Setter TargetName="content" Property="ContentPresenter.ContentTemplate" 
                                    Value="{Binding TemplateEdit, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}"/>
                            <Setter Property="Padding" Value="0" />
                            <Setter Property="Control.Background"
                                    Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                            <Setter Property="Border.BorderBrush"
                                    Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Controls:TreeViewExItem}, AncestorLevel=1}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>